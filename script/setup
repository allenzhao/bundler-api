#!/usr/bin/env ruby
# Create and migrate the database specified in the $DATABASE_URL environment
# variable.
#
# Usage: script/setup [--verbose] [--rebuild]
#
# Options:
#   --rebuild: drop the database before creating it
#   --verbose: print errors and warnings from postgres

$stdout.sync = true

lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'bundler/setup'
require 'bundler_api/env'
require 'bundler_api/cache'
require 'bundler_api/redis'
require 'open3'

def rebuild?
  @rebuild ||= ARGV.delete('--rebuild')
end

def verbose?
  @verbose ||= (ARGV.delete('-v') || ARGV.delete('--verbose'))
end

def print_output(output)
  return if !verbose? || output.empty?
  output.lines.each do |line|
    puts "  #{line}"
  end
  puts
end

def database_url
  ENV['DATABASE_URL']
end

def database_name
  File.basename(database_url)
end

def postgres_installed?
  !`which psql`.strip.empty?
end

def redis_ready?
  BundlerApi.redis.ping
  true
rescue
  false
end

def memcached_ready?
  BundlerApi::CacheInvalidator.new.memcached_client.alive!
  true
rescue
  false
end

def verify_dependencies
  puts 'Checking dependencies'
  unmet = []
  unmet << '  * postgres' unless postgres_installed?
  unmet << '  * redis' unless redis_ready?
  unmet << '  * memcached' unless memcached_ready?

  unless unmet.empty?
    abort "You have dependencies that are unmet or are not available:\n#{unmet.join("\n")}"
  end
end

abort 'DATABASE_URL environment variable required' unless database_url

verify_dependencies

if rebuild?
  puts 'Dropping database'
  output, _ = Open3.capture2e(*%W(dropdb --if-exists #{database_name}))
  print_output output
end

puts 'Creating database'
output, _ = Open3.capture2e(*%W{createdb --no-password #{database_name}})
print_output output

puts 'Migrating database'
output, _ = Open3.capture2e(*%W{sequel --migrate-directory db/migrations
                                       #{database_url}})
print_output output

puts "
Done! \
Run `rake update` and `rake fix_deps` to populate the database with \
all gems from rubygems.org."
